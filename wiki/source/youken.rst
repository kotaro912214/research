=======================
シミュレーションの用件
=======================


全体の流れ
==============

#. データの取得，パラメータの決定
#. シミュレーションの実行
#. 結果の書き出し

詳細な流れ
============

データの取得とパラメータの決定
-------------------------------

まず，必要なデータは以下の通りである．
これらは自分で値を設定するのとは異なり，APIやスクレイピングを通して実際のデータを取得する必要がある．

- ステーション

  - コード･･･ステーション識別のため
  - 緯度経度･･･APIで距離や移動時間を計算するため
  - キャパシティ＝利用可能台数＝駐車可能台数･･･RDFやRDEを計算するため
  - ステーション間の移動時間･･･移動コストのため

また，これらとは別に必要なパラメータは以下の通りである．

- パラメータ

  - ステーションの数
  - 試行時間･･･シミュレーションを実行する時間
  - 需要行列･･･いつ，どこから，どこへ，人が移動するかを表す行列
  - 人件費･･･再配置を行う従業員のコスト
  - 燃費･･･移動コストのため
  - 利用料金･･･利用可能時のコスト計算のため

ステーションの諸データについては一括でAPIで取得することができない．
以下に詳細な取得手順を示す．

#. ある地点を中心とした円形エリア内に存在する **ステーションの識別コードと緯度経度** をAPIから取得する．
#. エリア内に均等に分布するようそれらステーション一覧から，利用するステーションの数を基にしてランダムにステーションを抽出する．
#. 抽出されたステーションのキャパシティを取得するため識別コードを基にスクレイピングを実行する．
#. これらのデータをデバッグ用にCSVエクスポート，シミュレーション用にインスタンス変数に格納する．

ここまでの流れとプログラムを対応付けると以下のようになる．
ただし，変数名に関しては以下のルールに従う．

- stationの接頭辞としてSを使用
- 大文字で始まる変数名は行列(二次元配列)
- 定数はすべて大文字のスネークケース

.. csv-table:: Stationデータ
  :header: 項目, 変数名, 変数型
  :widths: 30, 30, 30

  "識別コード", "S_codes", "[str]"
  "緯度経度", "S_coords", "[(float, float)]"
  "キャパシティ", "S_capacities", "[int]"
  "移動時間", "S_transitions", "[[float]]"

パラメータはプログラム内では定数(大文字)として扱うこととする．

.. csv-table:: パラメータ
  :header: 項目, 変数名
  :widths: 30, 70

  "ステーション数", "NUMBER_OF_STATION"
  "試行時間", "TIME"
  "需要行列", "Demands"
  "従業員コスト", "C_EMPLOYEE_PER_DAY"
  "燃費", "FUEL_CONSUMPTION"
  "利用料金", "PRICE"
